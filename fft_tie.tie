//can make use of symmetry to reduce table size to one fourth??

//Table with element size of 16 returns Warnings

table SIN_WAVE 16 257 {
0, 201, 402, 603, 804, 1005, 1206, 1406,
1607, 1808, 2009, 2209, 2410, 2610, 2811, 3011,
3211, 3411, 3611, 3811, 4011, 4210, 4409, 4608,
4807, 5006, 5205, 5403, 5601, 5799, 5997, 6195,
6392, 6589, 6786, 6982, 7179, 7375, 7571, 7766,
7961, 8156, 8351, 8545, 8739, 8932, 9126, 9319,
9511, 9703, 9895, 10087, 10278, 10469, 10659, 10849,
11038, 11227, 11416, 11604, 11792, 11980, 12166, 12353,
12539, 12724, 12909, 13094, 13278, 13462, 13645, 13827,
14009, 14191, 14372, 14552, 14732, 14911, 15090, 15268,
15446, 15623, 15799, 15975, 16150, 16325, 16499, 16672,
16845, 17017, 17189, 17360, 17530, 17699, 17868, 18036,
18204, 18371, 18537, 18702, 18867, 19031, 19194, 19357,
19519, 19680, 19840, 20000, 20159, 20317, 20474, 20631,
20787, 20942, 21096, 21249, 21402, 21554, 21705, 21855,
22004, 22153, 22301, 22448, 22594, 22739, 22883, 23027,
23169, 23311, 23452, 23592, 23731, 23869, 24006, 24143,
24278, 24413, 24546, 24679, 24811, 24942, 25072, 25201,
25329, 25456, 25582, 25707, 25831, 25954, 26077, 26198,
26318, 26437, 26556, 26673, 26789, 26905, 27019, 27132,
27244, 27355, 27466, 27575, 27683, 27790, 27896, 28001,
28105, 28208, 28309, 28410, 28510, 28608, 28706, 28802,
28897, 28992, 29085, 29177, 29268, 29358, 29446, 29534,
29621, 29706, 29790, 29873, 29955, 30036, 30116, 30195,
30272, 30349, 30424, 30498, 30571, 30643, 30713, 30783,
30851, 30918, 30984, 31049, 31113, 31175, 31236, 31297,
31356, 31413, 31470, 31525, 31580, 31633, 31684, 31735,
31785, 31833, 31880, 31926, 31970, 32014, 32056, 32097,
32137, 32176, 32213, 32249, 32284, 32318, 32350, 32382,
32412, 32441, 32468, 32495, 32520, 32544, 32567, 32588,
32609, 32628, 32646, 32662, 32678, 32692, 32705, 32717,
32727, 32736, 32744, 32751, 32757, 32761, 32764, 32766,
32767
}

regfile FFT_REG_SIMD 128 4 fftsv


function [31:0] FFT_VAR_SHIFT([31:0] data, [3:0] sh)
{
assign FFT_VAR_SHIFT = TIEmux(sh,
data[31:0],
{data[30:0], 1'b0},
{data[29:0], 2'b0},
{data[28:0], 3'b0},
{data[27:0], 4'b0},
{data[26:0], 5'b0},
{data[25:0], 6'b0},
{data[24:0], 7'b0},
{data[23:0], 8'b0},
{data[22:0], 9'b0},
{data[21:0], 10'b0},
{data[20:0], 11'b0},
{data[19:0], 12'b0},
{data[18:0], 13'b0},
{data[17:0], 14'b0},
{data[16:0], 15'b0});
}


function [15:0] ADD16([15:0] a, [15:0] b){
assign ADD16 = TIEadd(a, b, 1'b0);
}

function [31:0] ADD32([31:0] a, [31:0] b) slot_shared {
assign ADD32 = TIEadd(a, b, 1'b0);
}

operation FFT_SIMD_LOAD {in AR *array_base_addr, in AR offset, out FFT_REG_SIMD out_reg_128} {out VAddr, in MemDataIn128}
{
assign VAddr = ADD32(array_base_addr, {offset[30:0], 1'b0});

wire [15:0] elem_1 = MemDataIn128[15:0];
wire [15:0] elem_2 = MemDataIn128[31:16];
wire [15:0] elem_3 = MemDataIn128[47:32];
wire [15:0] elem_4 = MemDataIn128[63:48];
wire [15:0] elem_5 = MemDataIn128[79:64];
wire [15:0] elem_6 = MemDataIn128[95:80];
wire [15:0] elem_7 = MemDataIn128[111:96];
wire [15:0] elem_8 = MemDataIn128[127:112];

assign out_reg_128 = {elem_1, elem_2, elem_3, elem_4, elem_5, elem_6, elem_7, elem_8 };

}

operation FFT_SIMD_STORE {in AR *array_base_addr, in AR offset, in FFT_REG_SIMD out_reg_128} {out VAddr, out MemDataOut128}
{
assign VAddr = ADD32(array_base_addr, {offset[30:0], 1'b0});

wire [15:0] elem_1 = out_reg_128[15:0];
wire [15:0] elem_2 = out_reg_128[31:16];
wire [15:0] elem_3 = out_reg_128[47:32];
wire [15:0] elem_4 = out_reg_128[63:48];
wire [15:0] elem_5 = out_reg_128[79:64];
wire [15:0] elem_6 = out_reg_128[95:80];
wire [15:0] elem_7 = out_reg_128[111:96];
wire [15:0] elem_8 = out_reg_128[127:112];

assign MemDataOut128 = {elem_1, elem_2, elem_3, elem_4, elem_5, elem_6, elem_7, elem_8 };
}

//immediate_range offset 0 1 1

//Have to modify
operation FFT_SHIFT_CHECK {in AR *addr, in AR offset, out AR shift} {out VAddr, in MemDataIn128}{
 assign VAddr = ADD32(addr, offset[31:1]);
 
 wire [15:0] o1 = MemDataIn128[15:0];
 wire [15:0] o2 = MemDataIn128[31:16];
 wire [15:0] o3 = MemDataIn128[47:32];
 wire [15:0] o4 = MemDataIn128[63:48];
 wire [15:0] o5 = MemDataIn128[79:64];
 wire [15:0] o6 = MemDataIn128[95:80];
 wire [15:0] o7 = MemDataIn128[111:96];
 wire [15:0] o8 = MemDataIn128[127:112];

 wire s1 = (!o1[15] && o1[14]) || (o1[15] && (!o1[14] || o1[13:0] == 14'b0));
 wire s2 = (!o2[15] && o2[14]) || (o2[15] && (!o2[14] || o2[13:0] == 14'b0));
 wire s3 = (!o3[15] && o3[14]) || (o3[15] && (!o3[14] || o3[13:0] == 14'b0));
 wire s4 = (!o4[15] && o4[14]) || (o4[15] && (!o4[14] || o4[13:0] == 14'b0));
 wire s5 = (!o5[15] && o5[14]) || (o5[15] && (!o5[14] || o5[13:0] == 14'b0));
 wire s6 = (!o6[15] && o6[14]) || (o6[15] && (!o6[14] || o6[13:0] == 14'b0));
 wire s7 = (!o7[15] && o7[14]) || (o7[15] && (!o7[14] || o7[13:0] == 14'b0));
 wire s8 = (!o8[15] && o8[14]) || (o8[15] && (!o8[14] || o8[13:0] == 14'b0));

 assign shift = {31'b0, s1 ||  s2 || s3 || s4 || s5 || s6 || s7 || s8 };
 }
 
 /*function [15:0] FFT_TWIDDLE([15:0]j, [0:0] shift){
 //wr =  Sinewave[j+N_WAVE/4];
 //wi = -Sinewave[j];
 wire [15:0]ind_wr = TIEadd(j, 256, 1'b0);
 wire [31:0] wr = SIN_WAVE[ind_wr];
 assign FFT_TWIDDLE = TIEmux(shift, wr, {wr[15], wr[15:1]});
   }*/
 
 function [15:0] SIN ([9:0] idx, [0:0] not_negate){
 //wire [7:0] neg_idx = TIEadd(0, ~idx[7:0], 1'b1);
 wire [8:0] x2 = TIEadd(8'h0, ~idx[7:0], 1'b1); // 512 - x
 wire [8:0] sin_idx = TIEmux(idx[8:0] == 256 || !idx[8:8], x2[8:0], idx[8:0]);
 wire [15:0] value = SIN_WAVE[sin_idx];
 assign SIN = TIEmux(((idx[9:0] == 512) || !idx[9:9] ) && not_negate, TIEadd(16'h0, ~value[15:0], 1'b1), value[15:0]);
 }

 function [31:0] FFT_TWIDDLE_FACTOR ([31:0] i, [1:0] x, [4:0] k, [0:0] shift, [0:0] inverse){
 wire [31:0] inc = TIEadd(i, x, 1'b0);
 wire [31:0] j = FFT_VAR_SHIFT(inc, k);
 wire [9:0] cos_idx = TIEadd(j, 256, 1'b0);
 wire [15:0] sin = SIN(j, inverse);
 wire [15:0] wr1 = SIN(cos_idx, 1);
 assign FFT_TWIDDLE_FACTOR = {TIEmux(shift, wr1, {wr1[15], wr1[15:1]}), TIEmux(shift, sin, {sin[15], sin[15:1]})};
 }

 //2 twiddle factor computation units
 function [15:0] FFT_TWIDDLE_FACTOR1 ([31:0] i, [1:0] x, [4:0] k, [0:0] shift, [0:0] inverse) slot_shared {
 assign FFT_TWIDDLE_FACTOR1 = FFT_TWIDDLE_FACTOR(i, x, k, shift, inverse);
 }
 
 function [15:0] FFT_TWIDDLE_FACTOR2 ([31:0] i, [1:0] x, [4:0] k, [0:0] shift, [0:0] inverse)slot_shared {
 assign FFT_TWIDDLE_FACTOR2 = FFT_TWIDDLE_FACTOR(i, x, k, shift, inverse);
 }

function [63:0] FFT_BUTTERFLY ([15:0] fri,  [15:0] frj, [15:0] fii, [15:0] fij, [15:0] wr, [15:0] wi, [0:0] shift) {
/*
   j = i + l;
    tr = fix_mpy(wr,fr[j]) - fix_mpy(wi,fi[j]);
    ti = fix_mpy(wr,fi[j]) + fix_mpy(wi,fr[j]); 
    qr = fr[i];
    qi = fi[i];           
    if(shift)
    {
         qr >>= 1;
         qi >>= 1;
    }          
    fr[j] = qr - tr;
    fi[j] = qi - ti;
    fr[i] = qr + tr;
    fi[i] = qi + ti;
*/
 //tr 
 wire [31:0] tr_op1 = TIEmul(wr, frj, 1'b1);
 wire [31:0] tr_op2 = TIEmul(wi, fij, 1'b1);
 wire [15:0] tr = TIEadd(tr_op1[30:15], ~tr_op2[30:15], 1'b1);

 //ti
 wire [31:0] ti_op1 = TIEmul(wr, fij, 1'b1);
 wire [31:0] ti_op2 = TIEmul(wi, frj, 1'b1);
 wire [15:0] ti = TIEadd(ti_op1[30:15], ti_op2[30:15], 1'b0);

 //qr, qi
 wire [15:0] qr = TIEmux(shift[0], fri, {fri[15], fri[15:1]});
 wire [15:0] qi = TIEmux(shift[0], fii, {fii[15], fii[15:1]});

 //final result
 wire [15:0] fri_res = TIEadd(qr, tr, 1'b0);
 wire [15:0] frj_res = TIEadd(qr, ~tr, 1'b1);
 wire [15:0] fii_res = TIEadd(qi, ti, 1'b0);
 wire [15:0] fij_res = TIEadd(qi, ~ti, 1'b1);
 assign FFT_BUTTERFLY = {fri_res, frj_res, fii_res, fij_res};
 }

 function [63:0] FFT_SIMD_BUTTERFLY ([63:0] data, [15:0] wr, [15:0] wi, [0:0] shift) {
 //data = {fri, frj, fii, fij}
 wire [15:0] fri = data[63:48];
 wire [15:0] frj = data[47:32];
 wire [15:0] fii = data[31:16];
 wire [15:0] fij = data[15:0];
 //tr 
 wire [31:0] tr_op1 = TIEmul(wr, frj, 1'b1);
 wire [31:0] tr_op2 = TIEmul(wi, fij, 1'b1);
 wire [15:0] tr = TIEadd(tr_op1[30:15], ~tr_op2[30:15], 1'b1);
 //ti
 wire [31:0] ti_op1 = TIEmul(wr, fij, 1'b1);
 wire [31:0] ti_op2 = TIEmul(wi, frj, 1'b1);
 wire [15:0] ti = TIEadd(ti_op1[30:15], ti_op2[30:15], 1'b0);
 //qr, qi
 wire [15:0] qr = TIEmux(shift[0], fri, {fri[15], fri[15:1]});
 wire [15:0] qi = TIEmux(shift[0], fii, {fii[15], fii[15:1]});
 //final result
 wire [15:0] fri_res = TIEadd(qr, tr, 1'b0);
 wire [15:0] frj_res = TIEadd(qr, ~tr, 1'b1);
 wire [15:0] fii_res = TIEadd(qi, ti, 1'b0);
 wire [15:0] fij_res = TIEadd(qi, ~ti, 1'b1);
 
 assign FFT_SIMD_BUTTERFLY = {fri_res, frj_res, fii_res, fij_res};
 }
  
 function [63:0] FFT_SIMD_BUTTERFLY_01 ([63:0] data, [15:0] wr, [15:0] wi, [0:0] shift) slot_shared {
 assign FFT_SIMD_BUTTERFLY_01 = FFT_SIMD_BUTTERFLY(data, wr, wi, shift);
 }
 
 function [63:0] FFT_SIMD_BUTTERFLY_02 ([63:0] data, [15:0] wr, [15:0] wi, [0:0] shift) slot_shared {
 assign FFT_SIMD_BUTTERFLY_02 = FFT_SIMD_BUTTERFLY(data, wr, wi, shift);
 }
 
 function [63:0] FFT_SIMD_BUTTERFLY_03 ([63:0] data, [15:0] wr, [15:0] wi, [0:0] shift) slot_shared {
 assign FFT_SIMD_BUTTERFLY_03 = FFT_SIMD_BUTTERFLY(data, wr, wi, shift);
 }
 
 function [63:0] FFT_SIMD_BUTTERFLY_04 ([63:0] data, [15:0] wr, [15:0] wi, [0:0] shift) slot_shared {
 assign FFT_SIMD_BUTTERFLY_04 = FFT_SIMD_BUTTERFLY(data, wr, wi, shift);
}

 // first stage: four butterflies that are independent
 operation FFT_SIMD_STAGE_01 {inout FFT_REG_SIMD fr_reg_128, inout FFT_REG_SIMD fi_reg_128, in BR shift} {}{
 // specific to each butterfly
 wire [15:0] wi = 16'b0; //not needed in the first stage
 wire [15:0] wr = shift? 16'h7fff : 16'h3fff;

 wire [63:0] result1 = FFT_SIMD_BUTTERFLY_01({fr_reg_128[127:96], fi_reg_128[127:96]}, wr, wi, shift); //data = {fri,frj,fii,fij}
 wire [63:0] result2 = FFT_SIMD_BUTTERFLY_01({fr_reg_128[95:64], fi_reg_128[95:64]}, wr, wi, shift);
 wire [63:0] result3 = FFT_SIMD_BUTTERFLY_02({fr_reg_128[63:32], fi_reg_128[63:32]}, wr, wi, shift);
 wire [63:0] result4 = FFT_SIMD_BUTTERFLY_02({fr_reg_128[31:0], fi_reg_128[31:0]}, wr, wi, shift);

 assign fr_reg_128 = {result1[63:32], result2[63:32], result3[63:32], result4[63:32]};
 assign fi_reg_128 = {result1[31:0], result2[31:0], result3[31:0], result4[31:0]};
 }

 schedule FFT_SIMD_FIRST_schedule {FFT_SIMD_STAGE_01}{
 def fr_reg_128 2;
 def fi_reg_128 2;
 }

 // second stage: four butterflies, two interleaved at a time
 operation FFT_SIMD_STAGE_02 {inout FFT_REG_SIMD fr_reg_128, inout FFT_REG_SIMD fi_reg_128, in BR shift, in BR inverse} {}{
 // two twiddle factors- are constants irrespective of size of N; w1 = 1 + 0j; w2 = 0 + j(-1)
 wire [15:0] wi1 = 16'b0;
 wire [15:0] wr1= shift? 16'h7fff : 16'h3fff;
 wire [15:0] wr2 = 16'b0;
 wire [15:0] wi2 = TIEmux({inverse, shift}, 16'h8001, 16'hc000, 16'h7fff, 16'h3fff);

 wire [63:0] op1 = FFT_SIMD_BUTTERFLY_01({fr_reg_128[127:112], fr_reg_128[95:80], fi_reg_128[127:112], fi_reg_128[95:80]}, wr1, wi1, shift);
 wire [63:0] op2 = FFT_SIMD_BUTTERFLY_01({fr_reg_128[111:96], fr_reg_128[79:64], fi_reg_128[111:96], fi_reg_128[79:64]}, wr2, wi2, shift);
 wire [63:0] op3 = FFT_SIMD_BUTTERFLY_02({fr_reg_128[63:48], fr_reg_128[31:16], fi_reg_128[63:48], fi_reg_128[31:16]}, wr1, wi1, shift);
 wire [63:0] op4 = FFT_SIMD_BUTTERFLY_02({fr_reg_128[47:32], fr_reg_128[15:0], fi_reg_128[47:32], fi_reg_128[15:0]}, wr2, wi2, shift);
 
 assign fi_reg_128 = {op1[31:16],op2[31:16],op1[15:0], op2[15:0], op3[31:16],op4[31:16],op3[15:0], op4[15:0]};
 assign fr_reg_128 = {op1[63:48],op2[63:48],op1[47:32],op2[47:32],op3[63:48],op4[63:48],op3[47:32],op4[47:32]};
 }



 
 schedule FFT_SIMD_SECOND_schedule {FFT_SIMD_STAGE_02}
 {
 def fr_reg_128 2;
 def fi_reg_128 2;
 }

 function [31:0] FFT_INC_SHIFT ([31:0] i, [1:0] x, [4:0] k){
 wire [31:0] inc = TIEadd(i, x, 1'b0);
 assign FFT_INC_SHIFT = FFT_VAR_SHIFT(inc, k);
 }

 state FFT_SIMD_K 5 add_read_write
 
 // third stage: four interleaved butterflies
 operation FFT_SIMD_STAGE_03 {in AR i, inout FFT_REG_SIMD fr_reg_128, inout FFT_REG_SIMD fi_reg_128, in BR shift, in BR inverse} {in FFT_SIMD_K}{
 wire [4:0] k = FFT_SIMD_K;

 wire [31:0] tw1 = FFT_TWIDDLE_FACTOR1(i, 0, k, shift, inverse);
 wire [15:0] wr1 = tw1[31:16];
 wire [15:0] wi1 = tw1[15:0];

 wire [31:0] tw2 = FFT_TWIDDLE_FACTOR1(i, 1, k, shift, inverse);
 wire [15:0] wr2 = tw2[31:16];
 wire [15:0] wi2 = tw2[15:0];

 wire [31:0] tw3 = FFT_TWIDDLE_FACTOR2(i, 2, k, shift, inverse);
 wire [15:0] wr3 = tw3[31:16];
 wire [15:0] wi3 = tw3[15:0];

 wire [31:0] tw4 = FFT_TWIDDLE_FACTOR2(i, 3, k, shift, inverse);
 wire [15:0] wr4 = tw4[31:16];
 wire [15:0] wi4 = tw4[15:0];

 wire [63:0] op1 = FFT_SIMD_BUTTERFLY_01({fr_reg_128[127:112],fr_reg_128[63:48],fi_reg_128[127:112],fi_reg_128[63:48]},wr1, wi1, shift);
 wire [63:0] op2 = FFT_SIMD_BUTTERFLY_01({fr_reg_128[111:96], fr_reg_128[47:32],fi_reg_128[111:96], fi_reg_128[47:32]},wr2, wi2, shift);
 wire [63:0] op3 = FFT_SIMD_BUTTERFLY_02({fr_reg_128[95:80],  fr_reg_128[31:16],fi_reg_128[95:80],  fi_reg_128[31:16]},wr3, wi3, shift);
 wire [63:0] op4 = FFT_SIMD_BUTTERFLY_02({fr_reg_128[79:64],  fr_reg_128[15:0], fi_reg_128[79:64],  fi_reg_128[15:0]}, wr4, wi4, shift);

 assign fr_reg_128 = {op1[63:48],op2[63:48],op3[63:48],op4[63:48],op1[47:32],op2[47:32],op3[47:32],op4[47:32]};
 assign fi_reg_128 = {op1[31:16],op2[31:16],op3[31:16],op4[31:16],op1[15:0], op2[15:0], op3[15:0], op4[15:0]};
 }
  schedule FFT_SIMD_THIRD_schedule {FFT_SIMD_STAGE_03}{
 def fr_reg_128 2;
 def fi_reg_128 2;
 }
 
ctype FFT_REG_SIMD 128 128 FFT_REG_SIMD default

immediate_range st.FFT_REG_SIMD_immed2 -256 240 16
immediate_range ld.FFT_REG_SIMD_immed2 -256 240 16

